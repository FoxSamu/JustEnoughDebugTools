import java.util.stream.Collectors

plugins {
    id 'fabric-loom' version '0.9-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    testImplementation "net.fabricmc:dev-launch-injector:0.2.1+build.8"
}

tasks.withType(ProcessResources) {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes, group: "build") {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

if (project.hasProperty("shwMavenUser") && project.hasProperty("shwMavenPass")) {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact(remapJar) {
                    builtBy remapJar
                    artifactId "jedt"
                }
                artifact(sourcesJar) {
                    builtBy remapSourcesJar
                    artifactId "jedt"
                }
            }
        }

        repositories {
            maven {
                name = "ShwMaven"
                url = uri( "https://maven.shadew.net/" )
                credentials {
                    username = shwMavenUser
                    password = shwMavenPass
                }
            }
        }
    }
}

def getTestClassPath() {
    def cp = []
    sourceSets.test.runtimeClasspath.each {
        cp.add(it.toString())
    }
    return cp.stream().collect(Collectors.joining(";"))
}

sourceSets {
    gametest {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
    main {
    }
}

dependencies {
    gametestImplementation sourceSets.main.output
}

loom {
    runs {
        client {
            name "Minecraft Client"
            source sourceSets.gametest

            vmArg "-Djedt.test_structures_path=${file("gametest/gameteststructures")}"
        }
        server {
            name "Minecraft Server"
            source sourceSets.gametest

            vmArg "-Djedt.test_structures_path=${file("gametest/gameteststructures")}"
        }
        gametest {
            server()
            name "Minecraft GameTest"
            source sourceSets.gametest

            vmArg "-Djedt.gametest=true"
            vmArg "-Djedt.test_config=${file("gametest/gametest.json")}"
            vmArg "-Djedt.test_structures_dir=${file("gametest/gameteststructures")}"

            serverWithGui() // GameTestServer has no nogui property, this removes it
        }
    }
}
